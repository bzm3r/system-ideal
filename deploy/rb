#!/usr/bin/env bash


# TODO:
# Run both nixos-rebuild build and home-manager build
# Then check whether they need to be activated
# something like that, but then we won't be able to have the home-manager config depend on the system
# Or will we?? What if there's an interface for having home-manager depend on the system
# Something like "nixos-rebuild will write /var/lib/home-manager-defaults/defaults.json, which home-manager will/can then read if enabled by the user

set -euo pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

tmp=$(mktemp -d)
trap 'rm -rf "$tmp"' exit

export NIX_PATH=nixpkgs=$(realpath "$DIR/../external/nixpkgs")

git() { command git -C "$DIR/.." "$@"; }
gitbranch() { git symbolic-ref --short HEAD; }


nodes="[ "
for node in "$@"; do
  nodes+="\"$node\" "
done
nodes+="]"

echo "Building nix.conf..."
mkdir "$tmp/confdir"
nix-build "$DIR" --show-trace --out-link "$tmp/confdir/nix.conf" >/dev/null \
  -A config.nodes."$(hostname)".configuration.environment.etc.'"nix/nix.conf"'.source
export NIX_CONF_DIR="$tmp/confdir"

echo "Evaluating..."
nix-instantiate "$DIR" --show-trace --add-root "$tmp"/drv --indirect >/dev/null \
  --arg nodes "$nodes"

echo "Building..."
nix-build "$tmp"/drv --out-link "$tmp/result" >/dev/null

echo "Committing.."
if [[ ! -z "$(git add --all --dry-run)" ]]; then
	git add -u
  git commit --allow-empty-message -m ""
fi

echo "Deploying..."
"$tmp/result"

echo "Finished deploying"
